
# 1st stage, build the app
# use Alpine Linux for build stage
FROM openjdk:16-ea-23-alpine as build

# install build dependencies
RUN apk --no-cache add maven

WORKDIR /helidon

RUN mvn -version
ENV JAVA_HOME /opt/openjdk-16

# Create a first layer to cache the "Maven World" in the local repository.
# Incremental docker builds will always resume after that, unless you update
# the pom
ADD pom.xml .
RUN mvn package -Dmaven.test.skip -Declipselink.weave.skip

# Do the Maven build to create the custom Java Runtime Image
# Incremental docker builds will resume here when you change sources
ADD src src
RUN mvn -Ddocker.build=true package -Pjlink-image -DskipTests -Djlink.image.addClassDataSharingArchive=false -Djlink.image.testImage=false
RUN ls -ltr /helidon/target
RUN echo "done!"

# 2nd stage, build the final image with the JRI built in the 1st stage

FROM alpine:3.12
WORKDIR /helidon
COPY --from=build /helidon/target/helidon-quickstart-mp-jri ./
ENTRYPOINT ["bin/java", "-XX:SharedArchiveFile=lib/start.jsa", "-Xshare:auto", "-jar", "app/helidon-quickstart-mp.jar"]
EXPOSE 8080
